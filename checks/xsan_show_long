#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2012             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Author: Jeremy Leggat <jleggat@asu.edu>

### Collect and dump XSAN information.
# from `cvadmin -e fsmlist` will put out:
# fsm	name index port pid ismaster state timestamp launchcount coredumps flags lastadminaction timestamp lastterminationcode timestamp
# For each volume will put out `cvadmin -F Volume -e stat` with:
# stats	volume timestamp activeconnections blocksize devices groups blockstotal blocksfree
# and `cvadmin -F Volume -e show long` with:
# stripe volume	number name status totalblocks reserverblocks freeblocks
# not output with above: multipathmethod primarystripe readenabled writeenbaled
# for paths:
# paths	name device	hba	ctl	lun	state	controller
# for disks:
# disks	name device	sectors	sectorsize
import re

## XSAN Stripe Groups
# the inventory function
def inventory_xsan_show_long(checkname, info):
	inventory = []
	for line in info:
		params = {}
		params["index"] = line[3]
		params["status"] = line[5].split(':').pop()
		params["blocks"] = line[7].split(':').pop()
		params["reserved"] = line[10].split(':').pop()
		params["method"] = line[18].split(':').pop()
		params["read"] = line[22].split(':').pop()
		params["write"] = line[23].split(':').pop()
		inventory.append( ( "%s_%s" % ( line[0], re.sub('[\[\]]', '', line[4]) ), params ) )
	return inventory

# the check function
def check_xsan_show_long(item, params, info):
    for line in info:
    	name = "%s_%s" % ( line[0], re.sub('[\[\]]', '', line[4]) )
    	if name == item:
			index = line[3]
			status = line[5].split(':').pop()
			blocks = line[7].split(':').pop()
			reserved = line[10].split(':').pop()
			method = line[18].split(':').pop()
			read = line[22].split(':').pop()
			write = line[23].split(':').pop()
			if status == params["status"]:
				return (0, "OK - %s is %s" % (item, status))
			else:
				return (2, "CRITICAL - %s is %s" % (item, status))
			return (3, "UNKNOWN - %s - %s" % (item, status))
    return (3, "UNKNOWN - %s info not found" % item)

# declare the check to Check_MK
check_info['xsan_show_long'] = {
    "inventory_function"      : inventory_xsan_show_long,
    "check_function"          : check_xsan_show_long,
    "has_perfdata"            : False,
    "service_description"     : "XSAN Stripe Group %s ",
    "default_levels_variable" : "xsan_default_levels",
    "includes"                : [ "xsan.include" ],
    "group"                   : "filesystem",
}
