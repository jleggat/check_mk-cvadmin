# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2012             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Author: Jeremy Leggat <jleggat@asu.edu>

### Collect and dump XSAN information.
# from `cvadmin -e fsmlist` will put out:
# fsm	name index port pid ismaster state timestamp launchcount coredumps flags lastadminaction timestamp lastterminationcode timestamp
# For each volume will put out `cvadmin -F Volume -e stat` with:
# stats	volume timestamp activeconnections blocksize devices groups blockstotal blocksfree
# and `cvadmin -F Volume -e show long` with:
# stripe volume	number name status totalblocks reserverblocks freeblocks
# not output with above: multipathmethod primarystripe readenabled writeenbaled
# for paths:
# paths	name device	hba	ctl	lun	state	controller
# for disks:
# disks	name device	sectors	sectorsize
import re

## XSAN Status
# the inventory function
def inventory_xsan_stat(checkname, info):
    inventory = []
    for line in info:
    	inventory.append( (line[0], {}) )
    return inventory

# the check function
def check_xsan_stat(item, params, info):
    p = re.compile(r'\(.*\)')
    for line in info:
    	# is this our line?
    	if line[0] == item:
    		connections = line[2].split(':').pop()
    		blocksize = line[3].split(':').pop()
    		blocksize = blocksize[:-1]
    		blocks = line[7].split(':').pop()
    		blocks = p.sub( '',blocks )
    		blocks_free = line[8].split(':').pop()
    		blocks_free = p.sub( '',blocks_free )

    		size_mb = int(blocks) * int(blocksize) / (1024.0 * 1024.0)
    		avail_mb = int(blocks_free) * int(blocksize) / (1024.0 * 1024.0)
    		return df_check_filesystem(g_hostname, item, size_mb, avail_mb, params)

    return (3, "UNKNOWN - %s info not found" % item)

# declare the check to Check_MK
check_info['xsan_stat'] = {
    "inventory_function"      : inventory_xsan_stat,
    "check_function"          : check_xsan_stat,
    "service_description"     : "XSAN Vol %s Usage",
    "default_levels_variable" : "xsan_default_levels",
    "includes"                : [ "df.include", "xsan.include" ],
    "has_perfdata"            : True,
    "group"                   : "filesystem",
}
