#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2012             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Author: Jeremy Leggat <jleggat@asu.edu>

# Example for output from agent
# ------------------------------------------------------------
# <<<xsan>>>
# fsm   VOL 1   50129   1389    0   REGISTERED  1357924077.0    2   0   CONFIGURED,AUTO-START   START   1357924076. exit(0) 1357924075.0
# stats VOL 1220157291.0    40  16K 4K  17  5   4394520320 65.48 TB 2158561905 32.17 TB 49
# stripe    VOL 0   MetadataAndJournal  Up,MetaData,Journal,Exclusive   45775744    0   45688461    99
# stripe    VOL 1   Video-1 Up  1098630080  270720  540371843   49
# stripe    VOL 2   Video-2 Up  1098630080  270720  538981361   49
# stripe    VOL 3   Video-3 Up  1098630080  270720  540286197   49
# stripe    VOL 4   Video-4 Up  1098630080  270720  538922504   49
# paths     P_1      rdisk16 1   0   1   Available   default
# paths     P_2      rdisk22 1   0   2   Available   default
# paths     P_MDJ    rdisk4  1   0   0   Available   default
# paths     VT0101   rdisk8  2   0   1   Available   default
# paths     VT0102   rdisk9  1   0   2   Available   default
# paths     VT0103   rdisk18 2   0   3   Available   default
# paths     VT0104   rdisk17 1   0   4   Available   default
# paths     VT0201   rdisk2  1   0   0   Available   default
# paths     VT0202   rdisk12 2   0   1   Available   default
# paths     VT0203   rdisk15 1   0   2   Available   default
# paths     VT0204   rdisk20 2   0   3   Available   default
# paths     VT0301   rdisk1  1   0   0   Available   default
# paths     VT0302   rdisk14 2   0   1   Available   default
# paths     VT0303   rdisk10 1   0   2   Available   default
# paths     VT0304   rdisk19 2   0   3   Available   default
# paths     VT0401   rdisk0  1   0   0   Available   default
# paths     VT0402   rdisk11 2   0   1   Available   default
# paths     VT0403   rdisk13 1   0   2   Available   default
# paths     VT0404   rdisk21 2   0   3   Available   default
# paths     VTK01MDC rdisk3  1   0   0   Available   default
# -------------------------------------------------------------

factory_settings["xsan_default_levels"] = {
    "allowed_fsm_states" : ["REGISTERED"],
    "free_percent_crit"  : 20,
    "free_percent_warn"  : 30,
}

def inventory_xsan_fsm(checkname, info):
    return [(line[1], {}) for line in info if line[0] == "fsm" and len(line) == 15]

def check_xsan_fsm(item, params, info):
    fsminfo = (line for line in info if line[0] == "fsm" and line[1] == item)
    chk_info = fsminfo.next()

    port = chk_info[3]
    pid = chk_info[4]
    master = chk_info[5]
    state = chk_info[6]
    launchcount = int(chk_info[8])
    coredumps = int(chk_info[9])

    this_time = time.time()
    launch_timedif, launch_rate = get_counter("xsan.launchcount.%s" % (item), this_time, launchcount)
    dump_timedif, dump_rate = get_counter("xsan.coredumps.%s" % (item), this_time, coredumps)
    perfdata = [ ( "launch_count", launch_rate ), ( "core_dumps", dump_rate ) ]

    msg_txt = "pid: %s port: %s launch count: %d core dumps: %d" % (pid, port, launchcount, coredumps)

    if state not in params["allowed_fsm_states"]:
        return (2, "CRITICAL - %s - %s" % (state, msg_txt), perfdata)
    else:
        return (0, "OK - %s - %s" % (state, msg_txt), perfdata)

    return (3, "UNKNOWN - %s info not found" % item)

check_info['xsan.fsm'] = {
    "inventory_function"      : inventory_xsan_fsm,
    "check_function"          : check_xsan_fsm,
    "has_perfdata"            : True,
    "service_description"     : "XSAN Vol %s",
    "default_levels_variable" : "xsan_default_levels",
    "group"                   : "filesystem",
}

## XSAN Status

def inventory_xsan_stats(checkname, info):
    return [(line[1], {}) for line in info if line[0] == "stats" and len(line) == 15]

def check_xsan_stats(item, params, info):
    statinfo = (line for line in info if line[0] == "stats" and line[1] == item)
    chk_info = statinfo.next()

    connections = chk_info[3]
    blocksize = chk_info[4].replace("K", "")
    msg_buffer = chk_info[5]
    disks = chk_info[6]
    stripe_groups = chk_info[7]
    blocks = chk_info[8]
    blocks_nice = chk_info[9]
    blocks_units = chk_info[10]
    blocks_free = int(chk_info[11])
    blocks_free_nice = chk_info[12]
    blocks_free_unit = chk_info[13]
    blocks_free_percent = int(chk_info[14])

    size_mb = int(chk_info[8]) * int(blocksize) / (1024.0 * 1024.0)
    avail_mb = int(chk_info[11]) * int(blocksize) / (1024.0 * 1024.0)
    return df_check_filesystem(g_hostname, item, size_mb, avail_mb, params)

#     msg_txt = \
#     "%s stripe groups on %s disks %s/%s blocks used (%s%s/%s%s), block size: %s each message buffer: %s" \
#       % ( stripe_groups, disks, blocks_free, blocks, blocks_free_nice, blocks_free_unit,
#       blocks_nice, blocks_units, blocksize, msg_buffer, )
#     perfdata = [ ("connections", connections), ("percent_blocks_free",
#       blocks_free_percent, params["free_percent_warn"], params["free_percent_crit"], 0, 100),
#       ("blocks_free", blocks_free) ]
#
#     if blocks_free_percent < params["free_percent_crit"]:
#         return (2, "CRITICAL - %d%% free - %s" % (blocks_free_percent, msg_txt), perfdata)
#     elif blocks_free_percent < params["free_percent_warn"]:
#         return (1, "WARNING - %d%% free - %s" % (blocks_free_percent, msg_txt), perfdata)
#     else:
#         return (0, "OK - %d%% free - %s" % (blocks_free_percent, msg_txt), perfdata)

    return (3, "UNKNOWN - %s info not found" % item)

check_info['xsan.stats'] = {
    "inventory_function"      : inventory_xsan_stats,
    "check_function"          : check_xsan_stats,
    "has_perfdata"            : True,
    "service_description"     : "XSAN Stats %s",
    "default_levels_variable" : "xsan_default_levels",
    "group"                   : "filesystem",
    "includes"                : [ "df.include" ],
}

## XSAN Stripe Groups

def inventory_xsan_stripe(checkname, info):
    return [("%s.%s" % (line[1], line[2]), {"status": line[4]}) for line in info if line[0] == "stripe"]

def check_xsan_stripe(item, params, info):
    fsminfo = (line for line in info if line[0] == "stripe" and "%s.%s" % (line[1], line[2]) == item)
    chk_info = fsminfo.next()

    vol = chk_info[1]
    index = chk_info[2]
    title = chk_info[3]
    status = chk_info[4]

    if status == params["status"]:
        return (0, "OK - %s is %s" % (title,status))
    else:
        return (2, "CRITICAL - %s is %s" % (title,status))

    return (3, "UNKNOWN - %s info not found" % item)

check_info['xsan.stripe'] = {
    "inventory_function"      : inventory_xsan_stripe,
    "check_function"          : check_xsan_stripe,
    "has_perfdata"            : False,
    "service_description"     : "XSAN Stripe Group %s",
    "default_levels_variable" : "xsan_default_levels",
    "group"                   : "filesystem",
}

## XSAN Paths

def inventory_xsan_paths(checkname, info):
    return [(line[1], {"state": line[6]}) for line in info if line[0] == "paths" and len(line) == 8]

def check_xsan_paths(item, params, info):
    fsminfo = (line for line in info if line[0] == "paths" and line[1] == item)
    chk, vol, dev, hba, ctl, lun, state, controller = fsminfo.next()

    if state != params["state"]:
        return (2, "CRITICAL - state: %s changed from %s - device: %s hba: %s ctl: %s lun: %s" \
          % (state, params["state"], dev, hba, ctl, lun))
    else:
        return (0, "OK - state: %s device: %s hba: %s ctl: %s lun: %s" % (state, dev, hba, ctl, lun))

    return (3, "UNKNOWN - %s info not found" % item)

check_info['xsan.paths'] = {
    "inventory_function"      : inventory_xsan_paths,
    "check_function"          : check_xsan_paths,
    "has_perfdata"            : False,
    "service_description"     : "XSAN Path %s",
    "default_levels_variable" : "xsan_default_levels",
    "group"                   : "filesystem",
}

## XSAN Lag

def inventory_xsan_lag(checkname, info):
	return
#    return [(line[1], {}) for line in info if line[0] == "lag" and len(line) >= 2]


def check_xsan_lag(item, params, info):
    cvlag = (line for line in info if line[0] == "lag" and len(line) == 8 and line[1] == item)
    chk, vol, date, time, meta, avg, low, high = cvlag.next()

    text = "%s average reported on %s at %s (min: %s max: %s)" % (avg, meta, time, low, high)
    perfdata = [ ( "average", int(avg) ), ( "low", int(low) ), ( "high", int(high) ) ]

    return (0, text, perfdata)

    return (3, "UNKNOWN - %s info not found" % item)

check_info['xsan.lag'] = {
    "inventory_function"      : inventory_xsan_lag,
    "check_function"          : check_xsan_lag,
    "has_perfdata"            : True,
    "service_description"     : "XSAN Lag for %s",
    "default_levels_variable" : "xsan_default_levels",
    "group"                   : "filesystem",
}
