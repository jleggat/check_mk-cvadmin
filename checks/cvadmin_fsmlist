# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2012             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# <<<cvadmin_fsmlist>>>
#  VOLUME[1]  port 49432 pid 1613    State: REGISTERED 2015-01-06 11:46:45    Last Admin: START 2015-01-06 11:46:45    Last Termination: exit(17) 2015-01-06 11:46:45    Launches 2 core dumps 0 flags <CONFIGUREDAUTO-START>

import re


factory_settings["cvadmin_fsmlist_default_levels"] = {
    "allowed_states": ["REGISTERED"]
}


def extract_fsm(text):
	m = re.search('^\*?(\w+)\[\d+\]', text)
	if m:
		return m.group(1)


def inventory_cvadmin_fsmlist(checkname, info):
    inventory = []
    for line in info:
    	fs = extract_fsm(line[0])
    	params = {}
    	flags = list_get_next(line, "flags")
    	params["flags"] = re.sub('[<>]', '', flags)
    	if fs: inventory.append( (fs, params) )
    return inventory


def check_cvadmin_fsmlist(item, params, info):
    for line in info:
    	fs = extract_fsm(line[0])
    	if fs == item:
			perfdata = []
			infotext = []
			worst_state = 0

			port = list_get_next(line, "port")
			pid = list_get_next(line, "pid")
			launches = list_get_next(line, "Launches")
			dumps = list_get_next(line, "dumps")
			flags = list_get_next(line, "flags")
			flags = re.sub('[<>]', '', flags)
			state = list_get_next(line, "State:")

			this_time = time.time()

			launch_timedif, launch_rate = get_counter( "cvadmin_fsmlist.launchcount.%s" % (item), this_time, int(launches) )
			perfdata.append( ( "launch_count", launch_rate ) )

			dump_timedif, dump_rate = get_counter( "cvadmin_fsmlist.coredumps.%s" % (item), this_time, int(dumps) )
			perfdata.append( ( "core_dumps", dump_rate ) )

			infotext.append( state )
			if state not in params["allowed_states"]:
				worst_state = max(worst_state, 2)

			if flags != params["flags"]:
				infotext.append ("flags: %s not %s as expected" % (flags, params["flags"]) )
				worst_state = max(worst_state, 1)

			if worst_state == 1:
				infotext[-1] += "(!)"
			elif state == 2:
				infotext[-1] += "(!!)"

			infotext.append ("pid: %s port: %s launch count: %s core dumps: %s" % (pid, port, launches, dumps) )
			return worst_state, ", ".join(infotext) , perfdata

    return 3, "File System %s not found" % item


check_info["cvadmin_fsmlist"] = {
	'check_function':			check_cvadmin_fsmlist,
	'inventory_function':		inventory_cvadmin_fsmlist,
	"service_description":		"CVADMIN File System Master %s",
	"default_levels_variable":	"cvadmin_fsmlist_default_levels",
	"has_perfdata":				True,
    "includes"                : [ "cvadmin.include" ],
    "group"                   : "filesystem",
}
