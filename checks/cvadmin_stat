# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2012             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# <<<cvadmin_stat>>>
# VOLUME Created:SatAug3021:34:512008 ActiveConnections:26 FsBlockSize:16K MsgBufferSize:4K DiskDevices:17 StripeGroups:5 FsBlocks:4394520320(65.48TB) FsBlocksFree:1518029811(22.62TB)(34%)

import re


def inventory_cvadmin_stat_df(checkname, info):
    inventory = []
    for line in info:
        inventory.append( (line[0], None) )
    return inventory


def check_cvadmin_stat_df(item, params, info):
    p = re.compile(r'\(.*\)')
    for line in info:
        if line[0] == item:
            blocksize = line[3].partition(':')[2]
            blocksize = blocksize[:-1]
            blocks = line[7].partition(':')[2]
            blocks = p.sub( '',blocks )
            blocks_free = line[8].partition(':')[2]
            blocks_free = p.sub( '',blocks_free )

            size_mb = int(blocks) * int(blocksize) / (1024.0 * 1024.0)
            avail_mb = int(blocks_free) * int(blocksize) / (1024.0 * 1024.0)
            return df_check_filesystem(g_hostname, item, size_mb, avail_mb, params)

    return 3, "Volume %s not found" % item


def inventory_cvadmin_stat_info(checkname, info):
    inventory = []
    for line in info:
        params = {}
        params["created"] = line[1].partition(':')[2]
        params["blocksize"] = line[3].partition(':')[2]
        params["buffersize"] = line[4].partition(':')[2]
        params["diskdevices"] = line[5].partition(':')[2]
        params["stripegroups"] = line[6].partition(':')[2]
        params["blocks"] = line[7].partition(':')[2]
        inventory.append( (line[0], params) )
    return inventory


def check_cvadmin_stat_info(item, params, info):
    p = re.compile(r'\(.*\)')
    for line in info:
        if line[0] == item:
            perfdata = []
            infotext = []
            worst_state = 0

            created = line[1].partition(':')[2]
            connections = line[2].partition(':')[2]
            blocksize = line[3].partition(':')[2]
            buffersize = line[4].partition(':')[2]
            diskdevices = line[5].partition(':')[2]
            stripegroups = line[6].partition(':')[2]
            blocks = line[7].partition(':')[2]

            perfdata.append( ( "ActiveConnections", int(connections) ) )
            infotext.append( "%s ActiveConnections" % connections )

            infotext.append( "%s StripeGroups" % stripegroups )
            if stripegroups != params["stripegroups"]:
                infotext.append( "Expected %s" % params["stripegroups"] )
                worst_state = max(worst_state, 2)

            infotext.append( "%s DiskDevices" % diskdevices )
            if diskdevices != params["diskdevices"]:
                infotext.append( "Expected %s" % params["diskdevices"] )
                worst_state = max(worst_state, 2)

            infotext.append( "%s FsBlocks" % blocks )
            if blocks != params["blocks"]:
                infotext.append( "Expected %s" % params["blocks"] )
                worst_state = max(worst_state, 2)

            infotext.append( "%s FsBlockSize" % blocksize )
            if blocksize != params["blocksize"]:
                infotext.append( "Expected %s" % params["blocksize"] )
                worst_state = max(worst_state, 2)

            infotext.append( "%s MsgBufferSize" % buffersize )
            if buffersize != params["buffersize"]:
                infotext.append( "Expected %s" % params["buffersize"] )
                infotext[-1] += "(!)"
                worst_state = max(worst_state, 1)

            if created != params["created"]:
                infotext.append( "Created date %s Expected %s" % (params["created"], created) )
                worst_state = max(worst_state, 1)

            if worst_state == 1:
                infotext[-1] += "(!)"
            elif worst_state == 2:
                infotext[-1] += "(!!)"

            return worst_state, ", ".join(infotext) , perfdata

    return 3, "Volume %s not found" % item


check_info['cvadmin_stat.df'] = {
    "inventory_function"      : inventory_cvadmin_stat_df,
    "check_function"          : check_cvadmin_stat_df,
    "service_description"     : "CVADMIN fs_%s",
    "default_levels_variable" : "cvadmin_default_levels",
    "includes"                : [ "df.include", "cvadmin.include" ],
    "has_perfdata"            : True,
    "group"                   : "filesystem",
}


check_info['cvadmin_stat.info'] = {
    "inventory_function"      : inventory_cvadmin_stat_info,
    "check_function"          : check_cvadmin_stat_info,
    "service_description"     : "CVADMIN Stats %s",
    "includes"                : [ "cvadmin.include" ],
    "has_perfdata"            : True,
    "group"                   : "filesystem",
}
