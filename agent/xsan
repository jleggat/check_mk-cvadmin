#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2012             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Author: Jeremy Leggat <jleggat@asu.edu>

### Collect and dump XSAN information.
# from `cvadmin -e fsmlist` will put out:
# fsm	name index port pid ismaster state timestamp launchcount coredumps flags lastadminaction timestamp lastterminationcode timestamp
# For each volume will put out `cvadmin -F Volume -e stat` with:
# stats	volume timestamp activeconnections blocksize devices groups blockstotal blocksfree
# and `cvadmin -F Volume -e show long` with:
# stripe volume	number name status totalblocks reserverblocks freeblocks
# not output with above: multipathmethod primarystripe readenabled writeenbaled
# for paths:
# paths	name device	hba	ctl	lun	state	controller
# for disks:
# disks	name device	sectors	sectorsize

import os
import re
import subprocess
import sys
from datetime import datetime
import time

def exec_cvadmin(cmd,args):
  args.insert(0,cmd)
  stdout, stderr = subprocess.Popen(args, stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()
  return stdout

def get_fsm(lines):
  dict = {}
  title_re = re.compile(r'(\*|\s)(\w+)\[(\d)\]  port (\d+), pid (\d+)\n')
  state_re = re.compile(r'State: (\w+) (.*)\n')
  launch_re = re.compile(r'Launches (\d+), core dumps (\d+), flags \<(.*)\>')
  admin_re = re.compile(r'Last Admin: (\w+) (.*)\n')
  term_re = re.compile(r'Last Termination: (\w+\(\d+\)) (.*)\n')
  for line in lines.split("\n\n"):
    m = title_re.search(line)
    if m:
      attribs = []
      timestamp = time.time()
      for x in m.groups(): attribs.append(x)
      if (attribs.pop(0)).isspace(): attribs.append("0")
      else: attribs.append("1")
      state = state_re.search(line)
      if state:
        attribs.append(state.group(1))
        dt_tuple = time.strptime(state.group(2), "%Y-%m-%d %H:%M:%S")
        timestamp = time.mktime(dt_tuple)
        attribs.append('%r' % timestamp)
      else: attribs.append("unknown")
      launch = launch_re.search(line)
      if launch:
        for x in launch.groups(): attribs.append(x)
      admin = admin_re.search(line)
      if admin:
        attribs.append(admin.group(1))
        dt_tuple = time.strptime(admin.group(2), "%Y-%m-%d %H:%M:%S")
        timestamp = time.mktime(dt_tuple)
      else: attribs.append("NONE")
      attribs.append('%r' % timestamp)
      term = term_re.search(line)
      if term:
        attribs.append(term.group(1))
        dt_tuple = time.strptime(term.group(2), "%Y-%m-%d %H:%M:%S")
        timestamp = time.mktime(dt_tuple)
      else: attribs.append("NONE")
      attribs.append('%r' % timestamp)
      dict[attribs.pop(0)] = attribs
  return dict

def get_stripes(lines):
  sgroups = []
  for group in lines.split("\n\n"):
    if group.startswith( "Stripe Group" ):
      attribs = []
      m1 = re.search("Stripe Group (?P<number>\d)\s\[(?P<name>.+)\]  Status:(?P<status>.*)\n\s+Total Blocks:(?P<total>\d+) .* Reserved:(?P<reserved>\d+) .* Free:(?P<free>\d+) .* \((?P<percent>.*)%\)", group)
      for x in m1.groups(): attribs.append(x)
      sgroups.append(attribs)
  return sgroups

def get_stats(lines):
  attribs = []
  for line in lines.split("\n"):
    match = re.search("\w.*\w\s*:\s+(\w.*[\w\)]?)",line)
    if match:
      v = re.sub ( "\(|\)|%", "", match.group(1) )
      date_match = re.search(r"\d\d:\d\d:\d\d \d\d\d\d", v)
      if date_match:
        dt_tuple = time.strptime(v, "%a %b %d %H:%M:%S %Y")
        timestamp = time.mktime(dt_tuple)
        attribs.append('%r' % timestamp)
      else: attribs.append(v)
  return attribs

def get_paths(lines):
  vols = []
  for groups in lines.split("\n\n"):
    if groups.startswith( "Controller" ):
      m1 = re.search("Controller: <(\w+)>",groups)
      con = m1.group(1)
      for line in groups.split("\n"):
        match = re.search("(?x)(\w+)\s+on.device:.(\wdisk\d+)\s+hba:.(\d+)\sctl:.(\d+)\slun:.(\d+)\sstate:.(\w+)",line)
        if match:
          attribs = []
          for x in match.groups(): attribs.append(x)
          attribs.append(con)
          vols.append(attribs)
  return vols

def get_disks(lines):
  d = {}
  for line in lines.split("\n"):
    match = re.search("^(\w+) on .* sectors: (\d+)\s+sector size: (\d+)",line)
    if match:
      d[match.group(1)] = [match.group(2), match.group(3)]
  return d

def main():

  cvadmin = "/usr/sbin/cvadmin"

  if os.path.isfile(cvadmin): pass
  else: sys.exit()

  retcode = subprocess.call([cvadmin, "-e", "quit"], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  if retcode > 0: sys.exit()
  print '<<<xsan>>>'

  fsm_data = exec_cvadmin(cvadmin,["-e", "fsmlist"])
  fsm = get_fsm(fsm_data)

  if fsm:
    for key in fsm:
      stats = exec_cvadmin(cvadmin,["-F",key,"-e", "stat"])
      showl = exec_cvadmin(cvadmin,["-F",key,"-e", "show", "long"])
      stizzle = get_stats(stats)
      strizzies = get_stripes(showl)
      print 'fsm\t' + key + "\t" + "\t".join(fsm[key])
      print 'stats\t' + key + "\t" + "\t".join(stizzle)
      for sg in strizzies:
        print 'stripe\t' + key + "\t" + "\t".join(sg)
  paths = exec_cvadmin(cvadmin,["-e", "paths"])
#  disks = exec_cvadmin(cvadmin,["-e", "disks"])

  pathlists = get_paths(paths)

  for pth in pathlists:
    print 'paths\t' + "\t" + "\t".join(pth)

if __name__ == "__main__":
  main()
